using CaTestJz.Application.Common.Interfaces.Authentication;
using CaTestJz.Application.Common.Interfaces.Persistence;
using CaTestJz.Domain.Entities;

namespace CaTestJz.Application.Services.Authentication
{
    public class AuthenticationService : IAuthenticationService
    {
        private readonly IJwtTokenGenerator _jwtTokenGenerator;
        private readonly IUserRepository _userRepository;

        public AuthenticationService(
            IJwtTokenGenerator jwtTokenGenerator,IUserRepository userRepository
            )
        {
            _jwtTokenGenerator = jwtTokenGenerator;
            _userRepository = userRepository;
        }

        public AuthenticationResult Register(User user)
        {
            // 1. Validate the user doesn't exists
            //if (_userRepository.GetUser(user.Email).Result?.Email == user.Email)
            //{
            //    throw new Exception("The user already exists");
            //}

            // 2. Create user (generate unique ID) & Persist to DB
            //var user = new User
            //{
            //    FirstName = firstName,
            //    LastName = lastName,
            //    Email = email,
            //    EmployeeNumber = employeeNumber,
            //    Password = password
            //};

            //_userRepository.Add(user);

            // The user.Id will be generated by the user repository

            // 3. Create JWT token
            //var accessToken = _jwtTokenGenerator.GenerateToken(user);

            var authResult = new AuthenticationResult();

            authResult.User = user;
            //authResult.AccessToken = accessToken;
            //authResult.RefreshToken = accessToken; // TODO: Get refresh token
            authResult.AuthMessage = "User created succesfully";

            return authResult;
        }

        public async Task<AuthenticationResult> Login(string email, string password)
        {
            
            // 1. Get user from db            
            var authResult = await _userRepository.GetUser(email, password);

            if (!authResult.AllowLogin)
            {
                //authResult.AuthMessage = "Bad user or credentials";
                return authResult;
            }

            // 2. Create JWT token
            var accessToken = _jwtTokenGenerator.GenerateToken(authResult.User);

            authResult.AccessToken = accessToken;
            authResult.RefreshToken = accessToken;

            return authResult;
        }
    }
}
